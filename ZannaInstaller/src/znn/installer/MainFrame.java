/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package znn.installer;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import net.jimmc.jshortcut.JShellLink;
import org.apache.commons.lang3.SystemUtils;

import com.apple.eawt.Application;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import znn.ui.components.ImagePanel;

/**
 *
 * @author Edgar Mesquita
 */
public class MainFrame extends javax.swing.JFrame
{

    String filePath;
    JShellLink link;
    Style _redColor;
    Style _greenColor;

    /**
     * Creates new form MainFrame
     */
    public MainFrame()
    {
        setUndecorated(true);
        initComponents();
        DefaultCaret caret = (DefaultCaret) tpFiles.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        _greenColor = tpFiles.addStyle("GreenColor", null);
        StyleConstants.setForeground(_greenColor, Color.GREEN);

        _redColor = tpFiles.addStyle("RedColor", null);
        StyleConstants.setForeground(_redColor, Color.RED);

        String programFilesPath;
        if (SystemUtils.IS_OS_WINDOWS)
        {
            String winProgramFilesPath = System.getenv("ProgramFiles");
            String winProgramFilesX86Path = winProgramFilesPath + " (x86)\\";
            programFilesPath = dirIsExists(winProgramFilesX86Path) ? winProgramFilesX86Path
                    : winProgramFilesPath + "\\";
        }
        else if (SystemUtils.IS_OS_LINUX)
        {
            programFilesPath = "/opt/";
        }
        else
        {
            Application application = Application.getApplication();
            Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/znn/installer/resources/docmac.png"));
            application.setDockIconImage(image);
            programFilesPath = "/Applications/";
        }
        tfInstallPath.enableInputMethods(false);
        tfInstallPath.setText(programFilesPath + "ZannaMuzicPlayer");

    }

    private boolean dirIsExists(String dirname)
    {

        File dir = new File(dirname);
        return dir.isDirectory();
    }

    public void setInstallPath(String path)
    {
        if (path.contains("ZannaMuzicPlayer"))
        {
            tfInstallPath.setText(path);
        }
        else
        {
            tfInstallPath.setText(path + SystemUtils.FILE_SEPARATOR + "ZannaMuzicPlayer");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // private void initComponentss() {
    //
    // jPanel1 = new
    // ImagePanel("znn/installer/resources/logo-zanna-header.png");
    // btCancel = new javax.swing.JButton();
    // btInstall = new javax.swing.JButton();
    // jLabel1 = new javax.swing.JLabel();
    // tfInstallPath = new javax.swing.JTextField();
    // btSelectFolder = new javax.swing.JButton();
    // jScrollPane1 = new javax.swing.JScrollPane();
    // tpFiles = new javax.swing.JTextPane();
    //
    // setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    // setTitle("Instalador Zanna Muzic Player");
    // setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/znn/installer/resources/face.png")));
    // setResizable(false);
    //
    // jPanel1.setOpaque(false);
    // jPanel1.setPreferredSize(new java.awt.Dimension(270, 150));
    //
    // javax.swing.GroupLayout jPanel1Layout = new
    // javax.swing.GroupLayout(jPanel1);
    // jPanel1.setLayout(jPanel1Layout);
    // jPanel1Layout.setHorizontalGroup(
    // jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addGap(0, 270, Short.MAX_VALUE)
    // );
    // jPanel1Layout.setVerticalGroup(
    // jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addGap(0, 150, Short.MAX_VALUE)
    // );
    //
    // btCancel.setText("Cancelar");
    // btCancel.addActionListener(new java.awt.event.ActionListener() {
    // public void actionPerformed(java.awt.event.ActionEvent evt) {
    // btCancelActionPerformed(evt);
    // }
    // });
    //
    // btInstall.setText("Instalar");
    // btInstall.addActionListener(new java.awt.event.ActionListener() {
    // public void actionPerformed(java.awt.event.ActionEvent evt) {
    // btInstallActionPerformed(evt);
    // }
    // });
    //
    // jLabel1.setText("Bem-vindo ao instalador do Zanna Muzic");
    // jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    // jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
    //
    // btSelectFolder.setText("Selecionar...");
    // btSelectFolder.addActionListener(new java.awt.event.ActionListener() {
    // public void actionPerformed(java.awt.event.ActionEvent evt) {
    // btSelectFolderActionPerformed(evt);
    // }
    // });
    //
    // tpFiles.setEditable(false);
    // jScrollPane1.setViewportView(tpFiles);
    //
    // javax.swing.GroupLayout layout = new
    // javax.swing.GroupLayout(getContentPane());
    // getContentPane().setLayout(layout);
    // layout.setHorizontalGroup(
    // layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addGroup(layout.createSequentialGroup()
    // .addGap(26, 26, 26)
    // .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
    // layout.createSequentialGroup()
    // .addGap(0, 0, Short.MAX_VALUE)
    // .addComponent(btInstall)
    // .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    // .addComponent(btCancel))
    // .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
    // layout.createSequentialGroup()
    // .addComponent(tfInstallPath)
    // .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    // .addComponent(btSelectFolder))
    // .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
    // layout.createSequentialGroup()
    // .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
    // javax.swing.GroupLayout.DEFAULT_SIZE,
    // javax.swing.GroupLayout.PREFERRED_SIZE)
    // .addGap(18, 18, 18)
    // .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 355,
    // Short.MAX_VALUE)
    // .addComponent(jScrollPane1))))
    // .addGap(25, 25, 25))
    // );
    // layout.setVerticalGroup(
    // layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addGroup(layout.createSequentialGroup()
    // .addGap(26, 26, 26)
    // .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    // .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
    // javax.swing.GroupLayout.DEFAULT_SIZE,
    // javax.swing.GroupLayout.PREFERRED_SIZE)
    // .addGroup(layout.createSequentialGroup()
    // .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43,
    // javax.swing.GroupLayout.PREFERRED_SIZE)
    // .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    // .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99,
    // javax.swing.GroupLayout.PREFERRED_SIZE)))
    // .addGap(16, 16, 16)
    // .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
    // .addComponent(tfInstallPath, javax.swing.GroupLayout.PREFERRED_SIZE,
    // javax.swing.GroupLayout.DEFAULT_SIZE,
    // javax.swing.GroupLayout.PREFERRED_SIZE)
    // .addComponent(btSelectFolder))
    // .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33,
    // Short.MAX_VALUE)
    // .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
    // .addComponent(btCancel)
    // .addComponent(btInstall))
    // .addGap(29, 29, 29))
    // );
    //
    // pack();
    // setLocationRelativeTo(null);
    // }
    @SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jPanel2 = new ImagePanel("znn/installer/resources/bg-site.png");
		jScrollPane1 = new javax.swing.JScrollPane();
		tpFiles = new javax.swing.JTextPane();
		jLabel1 = new javax.swing.JLabel();
		tfInstallPath = new javax.swing.JTextField();
		btSelectFolder = new javax.swing.JButton();
		btInstall = new javax.swing.JButton();
		btCancel = new javax.swing.JButton();
		jButton1 = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Zanna Muzic Player");
		setBackground(new java.awt.Color(204, 102, 0));
		setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
		setFocusableWindowState(false);
		setIconImage(Toolkit.getDefaultToolkit().getImage(
				getClass().getResource("/znn/installer/resources/face.png")));
		setResizable(false);

		jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1,
				1, new java.awt.Color(255, 255, 255)));
		jPanel2.setMaximumSize(new java.awt.Dimension(579, 366));
		jPanel2.setName("JPanelGround"); // NOI18N
		jPanel2.setPreferredSize(new java.awt.Dimension(579, 366));
		jPanel2.setRequestFocusEnabled(false);
		jPanel2.setVerifyInputWhenFocusTarget(false);

		tpFiles.setEditable(false);
		jScrollPane1.setViewportView(tpFiles);

		jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(255, 255, 255));
		jLabel1.setText(" Bem-vindo ao instalador");
		jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
		jLabel1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

		btSelectFolder.setText("Selecionar...");
		btSelectFolder.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btSelectFolderActionPerformed(evt);
			}
		});

		btInstall.setText("Instalar");
		btInstall.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				try {
					btInstallActionPerformed(evt);
				} catch (IOException | InterruptedException e) {
					e.printStackTrace();
				}
			}
		});

		btCancel.setText("Cancelar");
		btCancel.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btCancelActionPerformed(evt);
			}
		});

		jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/znn/installer/resources/close.png"))); // NOI18N
		jButton1.setContentAreaFilled(false);
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btCancelActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout
				.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabel1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addGroup(
																jPanel2Layout
																		.createSequentialGroup()
																		.addGroup(
																				jPanel2Layout
																						.createParallelGroup(
																								javax.swing.GroupLayout.Alignment.LEADING)
																						.addGroup(
																								jPanel2Layout
																										.createSequentialGroup()
																										.addComponent(
																												btInstall)
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												btCancel))
																						.addGroup(
																								jPanel2Layout
																										.createSequentialGroup()
																										.addGroup(
																												jPanel2Layout
																														.createParallelGroup(
																																javax.swing.GroupLayout.Alignment.TRAILING,
																																false)
																														.addComponent(
																																jScrollPane1,
																																javax.swing.GroupLayout.Alignment.LEADING,
																																javax.swing.GroupLayout.DEFAULT_SIZE,
																																447,
																																Short.MAX_VALUE)
																														.addComponent(
																																tfInstallPath,
																																javax.swing.GroupLayout.Alignment.LEADING))
																										.addPreferredGap(
																												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																										.addComponent(
																												btSelectFolder)))
																		.addGap(0,
																				11,
																				Short.MAX_VALUE)))
										.addContainerGap())
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addGap(0, 0, Short.MAX_VALUE)
										.addComponent(
												jButton1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												43,
												javax.swing.GroupLayout.PREFERRED_SIZE)));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(jButton1)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												89, Short.MAX_VALUE)
										.addComponent(jLabel1)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												99,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																tfInstallPath,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(
																btSelectFolder))
										.addGap(18, 18, 18)
										.addGroup(
												jPanel2Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(btInstall)
														.addComponent(btCancel))
										.addGap(19, 19, 19)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 344,
				javax.swing.GroupLayout.PREFERRED_SIZE));

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btCancelActionPerformed
    {// GEN-HEADEREND:event_btCancelActionPerformed
        WindowEvent closingEvent = new WindowEvent(this,
                WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue()
                .postEvent(closingEvent);
    }// GEN-LAST:event_btCancelActionPerformed

    private void btSelectFolderActionPerformed(java.awt.event.ActionEvent evt)// GEN-FIRST:event_btSelectFolderActionPerformed
    {// GEN-HEADEREND:event_btSelectFolderActionPerformed
        ChooseFolderFrame chooseFolderFrame = new ChooseFolderFrame(this);
        chooseFolderFrame.setVisible(true);

    }// GEN-LAST:event_btSelectFolderActionPerformed

    private void btInstallActionPerformed(java.awt.event.ActionEvent evt)
            throws IOException, InterruptedException// GEN-FIRST:event_btInstallActionPerformed
    {// GEN-HEADEREND:event_btInstallActionPerformed
        File dir = new File(tfInstallPath.getText());
        if (!dir.exists())
        {
            dir.mkdir();
        }

        File[] files = dir.listFiles();
        if (files != null && files.length > 0)
        {
            for (File aFile : files)
            {
                if (!aFile.getPath().contains("zm") && !aFile.getPath().contains("/data") && !aFile.getPath().contains(SystemUtils.FILE_SEPARATOR + "data"))
                {
                    removeDirectory(aFile);
                }
            }
        }

        try
        {
            if (SystemUtils.IS_OS_WINDOWS)
            {
                link = new JShellLink();
            }

            filePath = tfInstallPath.getText() + SystemUtils.FILE_SEPARATOR
                    + "ZannaMuzicPlayer.jar";

        }
        catch (Exception e)
        {
            e.printStackTrace();
        }

        btInstall.setEnabled(false);
        btCancel.setEnabled(false);
        btSelectFolder.setEnabled(false);
        tfInstallPath.setEnabled(false);
        if (unZipPlayer(getClass().getResourceAsStream("/znn/installer/data/ZannaMuzicPlayer.zip"), tfInstallPath.getText()))
        {
            //if (unZipPlayer("/zannaTemp/ZannaPLayer.zip", tfInstallPath.getText())) {
            if (SystemUtils.IS_OS_WINDOWS)
            {
                createDesktopShortcut();
            }
            else
            {
                String icoPath = saveIco();
                String jarFilePath = tfInstallPath.getText() + File.separator + "ZannaMuzicPlayer.jar";
                changeIconInMac("/znn/installer/resources/app.ico", tfInstallPath.getText() + File.separator + "ZannaMuzicPlayer.jar");
                createSymbolicLink(jarFilePath, System.getProperty("user.home") + File.separator + "Desktop" + File.separator + "ZannaMuzicPLayer");
                /*Application application = Application.getApplication();
                 Image image = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/znn/installer/resources/app.ico"));
                 application.setDockIconImage(image);*/

                PrintWriter out = new PrintWriter(new FileWriter(
                        System.getProperty("user.home") + "/.config/autostart/ZannaMuzicPlayer.desktop"));
                out.println("[Desktop Entry]");
                out.println("Name=ZannaMuzicPlayer");
                out.println("Comment=Autostart entry for ZannaMuzicPlayer");
                out.println("Exec=" + jarFilePath);
                out.println("Icon=" + icoPath);
                out.flush();
                out.close();
            }
            btInstall.setVisible(false);
            btCancel.setEnabled(true);
            btCancel.setText("Finalizar");
        }
        else
        {
            btInstall.setEnabled(true);
            btCancel.setEnabled(true);
            btSelectFolder.setEnabled(true);
            tfInstallPath.setEnabled(true);
        }
    }// GEN-LAST:event_btInstallActionPerformed

    private String saveIco() throws IOException
    {
        String icoPath = tfInstallPath.getText()
                + SystemUtils.FILE_SEPARATOR + "app.ico";
        InputStream icon = getClass().getResource(
                "/znn/installer/resources/app.ico").openStream();
        OutputStream output = new FileOutputStream(icoPath);
        byte[] buffer = new byte[8 * 1024];
        try
        {
            int bytesRead;
            while ((bytesRead = icon.read(buffer)) != -1)
            {
                output.write(buffer, 0, bytesRead);
            }
        }
        finally
        {
            output.close();
        }
        return icoPath;
    }

    public void createDesktopShortcut()
    {
        try
        {
            String icoPath = saveIco();

            link.setFolder(JShellLink.getDirectory("desktop"));
            link.setName("Zanna Muzic Player");
            link.setPath(filePath);
            link.setIconLocation(icoPath);
            link.save();

            String startupPath = System.getenv("APPDATA");
            startupPath += SystemUtils.FILE_SEPARATOR + "Microsoft";
            startupPath += SystemUtils.FILE_SEPARATOR + "Windows";
            startupPath += SystemUtils.FILE_SEPARATOR + "Start Menu";
            startupPath += SystemUtils.FILE_SEPARATOR + "Programs";
            startupPath += SystemUtils.FILE_SEPARATOR + "Startup";

            link.setFolder(startupPath);
            link.setName("Zanna Muzic Player");
            link.setPath(filePath);
            link.setIconLocation(icoPath);
            link.save();

        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }

    }

    private void createTempFile(InputStream in, String tmpFile) throws FileNotFoundException, IOException
    {
        OutputStream os = new FileOutputStream(tmpFile);
        byte[] buffer = new byte[4096];
        int bytesRead;
        while ((bytesRead = in.read(buffer)) != -1)
        {
            os.write(buffer, 0, bytesRead);
        }
        in.close();
        os.close();
    }

    private void removeFile(String path)
    {
        File f = new File(path);
        f.deleteOnExit();
    }

    public void changeIconInMac(String image, String file)
    {

        System.out.println("Imagem: " + image);
        System.out.println("file: " + file);
        //http://www.hamsoftengineering.com/codeSharing/SetFileIcon/SetFileIcon.html
        ///SetFileIcon -image app.ico -file ZannaPlayer.jar
        try
        {
            //String script = getClass().getResource("/znn/installer/resources/SetFileIcon").getFile();
            InputStream in = getClass().getResourceAsStream("/znn/installer/resources/SetFileIcon");
            String tmpFile = System.getProperty("user.dir") + File.separator + "SetFileIcon";
            createTempFile(in, tmpFile);

            //String script = "SetFileIcon";
            System.out.println(tmpFile);
            String[] cmdPermissao =
            {
                "chmod", "+x", tmpFile
            };
            //int exitCodePermissao = Runtime.getRuntime().exec(cmdPermissao).waitFor();
            Process p = Runtime.getRuntime().exec(cmdPermissao);
            String line2;
            BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
            while ((line2 = input.readLine()) != null)
            {
                System.out.println(line2);
            }
            /*     
             if (exitCodePermissao != 0) {
             throw new IOException("Erro ao dar permissao para troca de icone "+ exitCodePermissao);
             }
             */
            String[] imgs = image.split("/");
            String nameImg = imgs[imgs.length - 1];
            InputStream inImage = getClass().getResourceAsStream(image);
            String tmpImgFile = System.getProperty("user.dir") + File.separator + nameImg;
            createTempFile(inImage, tmpImgFile);
            String[] cmdTrocaIcone =
            {
                tmpFile, "-image", tmpImgFile, "-file", file
            };

            int exitCodeTrocaIcone = Runtime.getRuntime().exec(cmdTrocaIcone).waitFor();
            if (exitCodeTrocaIcone != 0)
            {
                throw new IOException("Erro ao trocar de icone " + exitCodeTrocaIcone);
            }
            removeFile(tmpFile);
            removeFile(tmpImgFile);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    public static void createSymbolicLink(String target, String link)
            throws IOException, InterruptedException
    {

        String[] cmd =
        {
            "ln", "-s", new File(target).getAbsolutePath(),
            new File(link).getAbsolutePath()
        };
        int exitCode = Runtime.getRuntime().exec(cmd).waitFor();
        if (exitCode != 0)
        {
            throw new IOException("ln signaled an error with exit code "
                    + exitCode);
        }
    }

    public static void removeDirectory(File dir)
    {
        if (dir.isDirectory())
        {
            File[] files = dir.listFiles();
            if (files != null && files.length > 0)
            {
                for (File aFile : files)
                {
                    removeDirectory(aFile);
                }
            }
            dir.delete();
        }
        else
        {
            dir.delete();
        }
    }

    //public boolean unZipPlayer(String zipFile, String outputFolder) {
    public boolean unZipPlayer(InputStream inFileZip, String outputFolder)
    {
        //System.out.println("arquivo zip: " + zipFile);
        boolean ok = false;
        byte[] buffer = new byte[1024];

        try
        {

            // create output directory is not exists
            File folder = new File(outputFolder);
            if (!folder.exists())
            {
                folder.mkdir();
            }

            // get the zip file content
            //File zipF = new File(zipFile);
            //FileInputStream inFileZip = new FileInputStream(zipF);
            ZipInputStream zis = new ZipInputStream(inFileZip);
            // get the zipped file list entry
            ZipEntry ze = zis.getNextEntry();

            while (ze != null)
            {

                String fileName = ze.getName();
                String libs[] = fileName.split("\\\\");
                File newFile = null;
                if (libs.length > 1)
                {
                    newFile = new File(outputFolder + File.separator
                            + libs[0] + File.separator + libs[1]);
                }
                else
                {
                    newFile = new File(outputFolder + File.separator
                            + fileName);
                }
                insertText("arquivo: " + File.separator + fileName + "\n",
                        _greenColor);
                this.revalidate();
                System.out.println("file unzip : " + newFile.getAbsoluteFile());

                // create all non exists folders
                // else you will hit FileNotFoundException for compressed folder
                new File(newFile.getParent()).mkdirs();

                FileOutputStream fos = new FileOutputStream(newFile);

                int len;
                while ((len = zis.read(buffer)) > 0)
                {
                    fos.write(buffer, 0, len);
                }

                fos.close();
                ze = zis.getNextEntry();
            }

            zis.closeEntry();
            zis.close();

            System.out.println("Done");
            insertText("\n\nInstalacao realizada com sucesso!", _redColor);
            ok = true;
        }
        catch (IOException ex)
        {
            ex.printStackTrace();
        }

        return ok;
    }

    private void insertText(String text, Style style)
    {
        StyledDocument doc = tpFiles.getStyledDocument();
        try
        {
            doc.insertString(doc.getLength(), text, style);
        }
        catch (BadLocationException e)
        {
        }
        tpFiles.setCaretPosition(tpFiles.getDocument().getLength());

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed"
        // desc=" Look and feel setting code (optional) ">
		/*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase
         * /tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(
                    java.util.logging.Level.SEVERE, null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new MainFrame().setVisible(true);
            }
        });
    }

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btCancel;
	private javax.swing.JButton btInstall;
	private javax.swing.JButton btSelectFolder;
	private javax.swing.JButton jButton1;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField tfInstallPath;
	private javax.swing.JTextPane tpFiles;
	// End of variables declaration//GEN-END:variables
}
